<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="csMapper">

	<resultMap id="cancelResult" type="Cancel">
		<result column="cancel_no" property="cancelNo"/>
		<result column="order_no" property="orderNo"/>
		<result column="cancel_reason" property="cancelReason"/>
		<result column="cancel_date" property="cancelDate"/>
		<result column="status" property="status"/>
		<result column="admin_memo" property="adminMemo"/>
		<result column="mem_id" property="memId"/>
		<result column="mem_name" property="memName"/>
		<result column="pay_way" property="payWay"/>
		<result column="price" property="price"/>
		<result column="bk_title" property="bkTitle"/>
		<result column="delivery_msg" property="deliveryMsg"/>
		<result column="order_price_comma" property="orderPriceComma"/>
	</resultMap>
	
	<resultMap id="refundResult" type="Refund">
		<result column="refund_no" property="refundNo"/>
		<result column="order_no" property="orderNo"/>
		<result column="status" property="status"/>
		<result column="refund_date" property="refundDate"/>
		<result column="admin_memo" property="adminMemo"/>
		<result column="refund_kind" property="refundKind"/>
		<result column="kind_no" property="kindNo"/>
		<result column="refund_price" property="refundPrice"/>
		<result column="refund_point" property="refundPoint"/>
		<result column="mem_id" property="memId"/>
		<result column="mem_name" property="memName"/>
		<result column="pay_way" property="payWay"/>
		<result column="price" property="price"/>
		<result column="bk_title" property="bkTitle"/>
		<result column="delivery_msg" property="deliveryMsg"/>
		<result column="refund_coupon" property="refundCoupon"/>
		<result column="coupon_name" property="refundCouponName"/>
		<result column="mem_no" property="memNo"/>
		<result column="order_price_comma" property="orderPriceComma"/>
	</resultMap>
	
	<resultMap id="returnResult" type="Return">
		<result column="return_no" property="returnNo"/>
		<result column="order_no" property="orderNo"/>
		<result column="return_reason" property="returnReason"/>
		<result column="return_date" property="returnDate"/>
		<result column="status" property="status"/>
		<result column="admin_memo" property="adminMemo"/>
		<result column="mem_id" property="memId"/>
		<result column="mem_name" property="memName"/>
		<result column="pay_way" property="payWay"/>
		<result column="price" property="price"/>
		<result column="bk_title" property="bkTitle"/>
		<result column="delivery_msg" property="deliveryMsg"/>
		<result column="order_price_comma" property="orderPriceComma"/>
	</resultMap>
	
	<!-- [관리자] '주문취소' 목록 개수 조회 (한진) -->
	<select id="selectAdminCancelCount" resultType="_int">
		select
			   count(*)
		  from cancel
	</select>
	
	<!-- [관리자] '반품' 목록 개수 조회 (한진) -->
	<select id="selectAdminReturnCount" resultType="_int">
		select
		       count(*)
		  from return
	</select>
	
	<!-- [관리자] '환불' 목록 개수 조회 (한진) -->
	<select id="selectAdminRefundCount" resultType="_int">
		select
		       count(*)
		  from refund
	</select>
	
	<!-- [관리자] '주문취소' 목록 조회 (한진) -->
	<select id="selectAdminCancelList" resultMap="cancelResult">
		select
               C.order_no,
		       M.mem_name,
		       M.mem_id,
		       regexp_replace(reverse(regexp_replace(reverse(to_char(P.price)), '([0-9]{3})','\1,')),'^,','') as "order_price_comma",
               cancel_no,
               cancel_reason,
               cancel_date,
               c.status,
               c.admin_memo,
               O.delivery_msg,
		       bk_title || decode(A."quantity", 1, null, ' 외 ' || to_char(A."quantity" - 1) || '권') as "bk_title"
		  from (
		         select
		                order_no "order_no",
		                min (bk_no) "bk_no",
		                sum(quantity) "quantity"
		           from order_detail
		          group by order_no
		        )A,
                orders O,
		        cancel C,
		        book B,
		        Members M,
		        payment P
		  where A."bk_no" = B.bk_no
		    and A."order_no" = O.order_no
            and O.order_no = C.order_no
		    and M.mem_no = O.mem_no
		    and O.pay_no = P.pay_no
		  order
		     by
		 <choose>
		 	<when test="array == 0">
		 		cancel_date desc
		 	</when> 
		 	<when test="array == 1">
		 		cancel_date asc
		 	</when>	
		 </choose> 
	</select>
	
	<!-- [관리자] '반품' 목록 조회 (한진) -->
	<select id="selectAdminReturnList" resultMap="returnResult">
		select
               R.order_no,
		       M.mem_name,
		       M.mem_id,
		       regexp_replace(reverse(regexp_replace(reverse(to_char(P.price)), '([0-9]{3})','\1,')),'^,','') as "order_price_comma",
               return_no,
               return_reason,
               return_date,
               R.status,
               R.admin_memo,
               delivery_msg,
		       bk_title || decode(A."quantity", 1, null, ' 외 ' || to_char(A."quantity" - 1) || '권') as "bk_title"
		  from (
		         select
		                order_no "order_no",
		                min (bk_no) "bk_no",
		                sum(quantity) "quantity"
		           from order_detail
		          group by order_no
		        )A,
                orders O,
		        return R,
		        book B,
		        Members M,
		        payment P
		  where A."bk_no" = B.bk_no
		    and A."order_no" = O.order_no
            and O.order_no = R.order_no
		    and M.mem_no = O.mem_no
		    and O.pay_no = P.pay_no
		 order
		    by 
		 <choose>
		 	<when test="array == 0">
		 		return_date desc
		 	</when> 
		 	<when test="array == 1">
		 		return_date asc
		 	</when>	
		 </choose> 
	</select>
	
	<!-- [관리자] '환불' 목록 조회 (한진) -->
	<select id="selectAdminRefundList" resultMap="refundResult">
		select
               R.order_no,
		       M.mem_name,
		       M.mem_id,
		       regexp_replace(reverse(regexp_replace(reverse(to_char(refund_price)), '([0-9]{3})','\1,')),'^,','') as "order_price_comma",
               refund_no,
               R.status,
               R.admin_memo,
               delivery_msg,
               refund_date,
               refund_kind,
               kind_no,
               refund_point,
		       bk_title || decode(A."quantity", 1, null, ' 외 ' || to_char(A."quantity" - 1) || '권') as "bk_title"
		  from (
		         select
		                order_no "order_no",
		                min (bk_no) "bk_no",
		                sum(quantity) "quantity"
		           from order_detail
		          group by order_no
		        )A,
                orders O,
		        refund R,
		        book B,
		        Members M,
		        payment P
		  where A."bk_no" = B.bk_no
		    and A."order_no" = O.order_no
            and O.order_no = R.order_no
		    and M.mem_no = O.mem_no
		    and O.pay_no = P.pay_no
		  order
		    by 
		 <choose>
		 	<when test="array == 0">
		 		refund_date desc
		 	</when> 
		 	<when test="array == 1">
		 		refund_date asc
		 	</when>	
		 </choose> 
	</select>
	
	<!-- [관리자] 검색조건에 일치하는 CS목록 개수 조회 (한진) -->
	<select id="selectAdminSearchCount" resultType="_int">
		select
		       count(*)
		  from
		<choose>
			<when test="cStatus == 1">
				cancel	
			</when>
			<when test="cStatus == 2">
				return
			</when>
			<when test="cStatus == 3">
				refund
			</when>
		</choose>
		  join orders using(order_no)
          join members m using(mem_no)
		 where
		<choose>
			<when test="cStatus == 1">
				<choose>
					<when test="condition == 'searchAll'">
						   order_no like '%' || #{keyword} || '%'
						or cancel_no like '%' || #{keyword} || '%'
						or mem_name like '%' || #{keyword} || '%'
						or mem_id 
					</when>
					<when test="condition == 'cancelNo'">
						   cancel_no 
					</when>
					<when test="condition == 'orderNo'">
						   order_no 
					</when>
					
					<when test="condition == 'memName'">
						   mem_name 
					</when>
					<when test="condition == 'memId'">
						   mem_id 
					</when>
				</choose>
			</when>
			<when test="cStatus == 2">
				<choose>
					<when test="condition == 'searchAll'">
						   order_no like '%' || #{keyword} || '%'
						or return_no like '%' || #{keyword} || '%'
						or mem_name like '%' || #{keyword} || '%'
						or mem_id 
					</when>
					<when test="condition == 'returnNo'">
						   return_no 
					</when>
					<when test="condition == 'orderNo'">
						   order_no 
					</when>
					
					<when test="condition == 'memName'">
						   mem_name 
					</when>
					<when test="condition == 'memId'">
						   mem_id 
					</when>
				</choose>
			</when>
			<when test="cStatus == 3">
				<choose>
					<when test="condition == 'searchAll'">
						   order_no like '%' || #{keyword} || '%'
						or refund_no like '%' || #{keyword} || '%'
						or mem_name like '%' || #{keyword} || '%'
						or mem_id 
					</when>
					<when test="condition == 'refundNo'">
						   refund_no 
					</when>
					<when test="condition == 'orderNo'">
						   order_no 
					</when>
					
					<when test="condition == 'memName'">
						   mem_name 
					</when>
					<when test="condition == 'memId'">
						   mem_id 
					</when>
				</choose>
			</when>
		</choose>
		like '%' || #{keyword} || '%'
	</select>
	
	<!-- [관리자] 검색조건에 일치하는 '주문취소'목록 조회 (한진) -->
	<select id="selectAdminSearchCancelList" resultMap="cancelResult">
		select
               C.order_no,
		       M.mem_name,
		       M.mem_id,
		       regexp_replace(reverse(regexp_replace(reverse(to_char(P.price)), '([0-9]{3})','\1,')),'^,','') as "order_price_comma",
               cancel_no,
               cancel_reason,
               cancel_date,
               c.status,
               c.admin_memo,
               O.delivery_msg,
		       bk_title || decode(A."quantity", 1, null, ' 외 ' || to_char(A."quantity" - 1) || '권') as "bk_title"
		  from (
		         select
		                order_no "order_no",
		                min (bk_no) "bk_no",
		                sum(quantity) "quantity"
		           from order_detail
		          group by order_no
		        )A,
                orders O,
		        cancel C,
		        book B,
		        Members M,
		        payment P
		  where A."bk_no" = B.bk_no
		    and A."order_no" = O.order_no
            and O.order_no = C.order_no
		    and M.mem_no = O.mem_no
		    and O.pay_no = P.pay_no
		  <choose>
			<when test="condition == 'searchAll'">
			   and (C.order_no like '%' || #{keyword} || '%'
				or cancel_no like '%' || #{keyword} || '%'
				or mem_name like '%' || #{keyword} || '%'
				or mem_id like '%' || #{keyword} || '%')
			</when>
			<when test="condition == 'orderNo'">
			   and C.order_no like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'cancelNo'">
			   and cancel_no like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'memName'">
			   and mem_name like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'memId'">
			   and mem_id like '%' || #{keyword} || '%'
			</when>
		</choose>
		  order
		     by
		 <choose>
		 	<when test="array == 0">
		 		cancel_date desc
		 	</when> 
		 	<when test="array == 1">
		 		cancel_date asc
		 	</when>	
		 </choose> 
	</select>
	
	<!-- [관리자] 검색조건에 일치하는 '반품'목록 조회 (한진) -->
	<select id="selectAdminSearchReturnList" resultMap="returnResult">
		select
               R.order_no,
		       M.mem_name,
		       M.mem_id,
		       regexp_replace(reverse(regexp_replace(reverse(to_char(P.price)), '([0-9]{3})','\1,')),'^,','') as "order_price_comma",
               return_no,
               return_reason,
               return_date,
               R.status,
               R.admin_memo,
               delivery_msg,
		       bk_title || decode(A."quantity", 1, null, ' 외 ' || to_char(A."quantity" - 1) || '권') as "bk_title"
		  from (
		         select
		                order_no "order_no",
		                min (bk_no) "bk_no",
		                sum(quantity) "quantity"
		           from order_detail
		          group by order_no
		        )A,
                orders O,
		        return R,
		        book B,
		        Members M,
		        payment P
		  where A."bk_no" = B.bk_no
		    and A."order_no" = O.order_no
            and O.order_no = R.order_no
		    and M.mem_no = O.mem_no
		    and O.pay_no = P.pay_no
		  <choose>
			<when test="condition == 'searchAll'">
			   and (R.order_no like '%' || #{keyword} || '%'
				or return_no like '%' || #{keyword} || '%'
				or mem_name like '%' || #{keyword} || '%'
				or mem_id like '%' || #{keyword} || '%')
			</when>
			<when test="condition == 'orderNo'">
			   and R.order_no like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'returnNo'">
			   and return_no like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'memName'">
			   and mem_name like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'memId'">
			   and mem_id like '%' || #{keyword} || '%'
			</when>
		</choose>
		 order
		    by 
		 <choose>
		 	<when test="array == 0">
		 		return_date desc
		 	</when> 
		 	<when test="array == 1">
		 		return_date asc
		 	</when>	
		 </choose> 
	</select>
	
	<!-- [관리자] 검색조건에 일치하는 '환불' 목록 조회 (한진) -->
	<select id="selectAdminSearchRefundList" resultMap="refundResult">
		select
               R.order_no,
		       M.mem_name,
		       M.mem_id,
		       regexp_replace(reverse(regexp_replace(reverse(to_char(P.price)), '([0-9]{3})','\1,')),'^,','') as "order_price_comma",
               refund_no,
               R.status,
               R.admin_memo,
               delivery_msg,
               refund_date,
               refund_kind,
               kind_no,
               refund_price,
               refund_point,
		       bk_title || decode(A."quantity", 1, null, ' 외 ' || to_char(A."quantity" - 1) || '권') as "bk_title"
		  from (
		         select
		                order_no "order_no",
		                min (bk_no) "bk_no",
		                sum(quantity) "quantity"
		           from order_detail
		          group by order_no
		        )A,
                orders O,
		        refund R,
		        book B,
		        Members M,
		        payment P
		  where A."bk_no" = B.bk_no
		    and A."order_no" = O.order_no
            and O.order_no = R.order_no
		    and M.mem_no = O.mem_no
		    and O.pay_no = P.pay_no
		  <choose>
			<when test="condition == 'searchAll'">
			   and (R.order_no like '%' || #{keyword} || '%'
				or refund_no like '%' || #{keyword} || '%'
				or mem_name like '%' || #{keyword} || '%'
				or mem_id like '%' || #{keyword} || '%')
			</when>
			<when test="condition == 'orderNo'">
			   and R.order_no like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'refundNo'">
			   and refund_no like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'memName'">
			   and mem_name like '%' || #{keyword} || '%'
			</when>
			<when test="condition == 'memId'">
			   and mem_id like '%' || #{keyword} || '%'
			</when>
		</choose>
		  order
		     by
		<choose>
		 	<when test="array == 0">
		 		refund_date desc
		 	</when> 
		 	<when test="array == 1">
		 		refund_date asc
		 	</when>	
		 </choose> 
	</select>
	
	<!-- [관리자] 주문취소 상세 조회 (한진) -->
	<select id="selectAdminCancelDetail" resultMap="cancelResult">
		select 
		       cancel_no,
		       order_no,
		       cancel_reason,
		       cancel_date,
		       status,
		       admin_memo
		  from cancel 
		 where cancel_no = #{cancelNo}
	</select>
	
	<!-- [관리자] 주문취소 - orders테이블 상태 변경 (한진) -->
	<update id="updateAdminCsOrderStatus">
		update
		       orders
		   set 
		   <choose>
		   		<when test="orderStatus != null">
		   			order_status = #{orderStatus},
		       		cs_status = #{csStatus}
		   		</when>
		   		<when test="orderStatus == null">
		   			cs_status = #{csStatus}
		   		</when>
		   </choose>
		 where order_no = #{orderNo}
	</update>
	
	<!-- [관리자] 주문취소 - cancel테이블 상태 변경 (한진) -->
	<update id="updateAdminCancelStatus">
		update
		       cancel
		   set status = #{csStatus}
		 where order_no = #{orderNo}
	</update>
	
	<!-- [관리자] 반품 상세 조회 (한진) -->
	<select id="selectAdminReturnDetail" resultMap="returnResult">
		select
		       return_no,
		       order_no,
		       return_reason,
		       return_date,
		       status,
		       admin_memo
		  from return
		 where return_no = #{returnNo}
	</select>
	
	<!-- [관리자] 반품 상태 변경(한진) -->
	<update id="updateAdminReturnStatus">
		update
		       return
		   set
		   		status = #{csStatus}
		    where order_no = #{orderNo}
	</update>
	
	<!-- [관리자] 환불 상세 조회 -->
	<select id="selectAdminRefundDetail" resultMap="refundResult">
		select
		       refund_no,
		       order_no,
		       status,
		       refund_date,
		       admin_memo,
		       refund_kind,
		       kind_no,
		       refund_price,
		       refund_point,
		       refund_coupon
		  from refund
		 where refund_no = #{refundNo}
	</select>
	
	<!-- [관리자] 환불 처리  -->
	<update id="updateAdminRefundStatus">
		update
		       refund
		   set status = '환불완료'
		 where order_no = #{orderNo}  
	</update>
	
	<!-- [관리자] 환불 테이블 insert (한진) -->
	<insert id="insertAdminRefundStatus">
		insert
		  into refund
		values
		     (
		       seq_refundno.nextval,
		       #{orderNo},
		       '환불전',
		       sysdate,
		       null,
		       #{refundKind},
		       #{kindNo},
			   #{refundPrice},
			   #{refundPoint},
			   #{refundCoupon}
		     )
	</insert>
	
	<!-- [관리자] 환불 - 사용된 포인트 반환 (한진)  -->
	<insert id="insertAdminRefundPoint">
		insert
		  into point
		values
		     (
		       seq_pointno.nextval,
		       #{memNo},
		       #{orderNo},
		       null,
		       '적립',
		       #{refundPoint},
		       sysdate
		     )
	</insert>
	
	<!-- [사용자] 내 주문 취소 접수 하기 (세아) -->
	<insert id="insertMyOrderCancel">
		insert
		into cancel
		(
			cancel_no,
			order_no,
			cancel_reason,
			status	
		)
		values
		(
			seq_cancelno.nextval,
			#{orderNo},
			#{cancelReason},
			#{status}
		)
	</insert>
	
	<!-- [사용자] 내 주문 반품 접수하기 (세아) -->
	<insert id="insertMyOrderReturn">
		insert
		into return
		(
			return_no,
			order_no,
			return_reason,
			status
		)values
		(
			seq_reno.nextval,
			#{orderNo},
			#{returnReason},
			#{status}
		)
	</insert>
	
	<!-- [사용자] 마이페이지 반품 내역이 있는지 확인(세아) -->
	<select id="selectMyReturnCount" resultType="_int">
		select count(*)
		from return
		where order_no = #{orderNo}
	</select>
	
	<!-- [사용자] 마이페이지 주문 취소 내역이 있는지 확인(세아) -->
	<select id="selectMyCancelCount" resultType="_int">
		select count(*)
		from cancel
		where order_no = #{orderNo}
	</select>
	
	<!-- [사용자] 마이페이지 환불 정보 조회하기 -->
	<select id="selectMyRefund" resultMap="refundResult">
		select refund_no
       		, order_no
       		, r.status
       		, refund_date
       		, refund_kind
       		, kind_no
       		, refund_price
       		, refund_point
       		, nvl(refund_coupon,0) refund_coupon
       		, nvl(coupon_name,'적용하신 쿠폰이 없습니다') coupon_name
		from refund r
		left join mem_coupon mc on mc.coupon_issue_num =  r.refund_coupon
		left join coupon c on mc.coupon_no = c.coupon_no
		where order_no = #{orderNo}
	</select>
	
	<!-- [관리자] 메모 등록/수정 (한진) -->
	<update id="updateAdminMemo">
		update
		       <choose>
		       	<when test="cStatus == 'cancel'">
		       		cancel
		       	</when>
		       	<when test="cStatus == 'return'">
		       		return
		       	</when>
		       	<when test="cStatus == 'refund'">
		       		refund
		       	</when>
		       </choose>
		   set admin_memo = #{adminMemo}
		 where order_no = #{orderNo}
	</update>
	
	<!-- [관리자] 메모 삭제 (한진) -->
	<update id="deleteAdminMemo">
		update
		<choose>
		       	<when test="cStatus == 'cancel'">
		       		cancel
		       	</when>
		       	<when test="cStatus == 'return'">
		       		return
		       	</when>
		       	<when test="cStatus == 'refund'">
		       		refund
		       	</when>
		       </choose>
		   set admin_memo = null
		 where order_no = #{orderNo}
	</update>
	
</mapper>