<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="rentalMapper">

	<resultMap id="rentalResult" type="Rental">
		<result column="rental_no" property="rentalNo"/>
		<result column="mem_no" property="memNo"/>
		<result column="bk_no" property="bkNo"/>
		<result column="store_no" property="storeNo"/>
		<result column="request_date" property="requestDate"/>
		<result column="receive_date" property="receiveDate"/>
		<result column="return_date" property="returnDate"/>
		<result column="rental_status" property="rentalStatus"/>
		<result column="bk_title" property="bkTitle"/>
		<result column="bk_publish" property="bkPublish"/>
		<result column="intro_originname" property="introOriginName"/>
		<result column="intro_changename" property="introChangeName"/>
		<result column="writer_name" property="writerName"/>
		<result column="store_name" property="storeName"/>
		<result column="bk_lct" property="bkLct"/>
		<result column="mem_name" property="memName"/>
		<result column="mem_id" property="memId"/>
	</resultMap>
	
	<!-- [사용자] 대여 내역 개수 조회 (연지) -->
	<select id="selectRentalCount" resultType="_int">
		select 
			   count(*)
	      from rental
	     where mem_no = #{memNo}
	</select>
	
	<!-- [사용자] 대여 내역 조회 (연지) -->
	<select id="selectRentalList" resultMap="rentalResult">
		select 
		       rental_no,
		       mem_no,
		       bk_no,
		       store_no,
		       request_date,
		       receive_date,
		       return_date,
		       rental_status,
		       bk_title,
		       store_name
		  from rental
		  join book using (bk_no)
		  join store using(store_no)
		 where mem_no = #{memNo}
	</select>
	
	<!-- [사용자] 대여 내역 상세 조회 (연지) -->
	<select id="selectRental" resultMap="rentalResult">
		select 
		       r.rental_no,
		       r.mem_no,
		       r.bk_no,
		       r.store_no,
		       request_date,
		       receive_date,
		       return_date,
		       rental_status,
		       bk_title,
               bk_publish,
		       intro_originname,
		       intro_changename,
               writer_name,
		       store_name,
		       bk_lct
		  from rental r
		  join book bk on (r.bk_no = bk.bk_no)
		  join store s on (r.store_no = s.store_no)
          join (select store_no, bk_lct
                  from off_book
                 where bk_no = (select bk_no
                                  from rental
                                 where rental_no = #{rentalNo})) ob on (r.store_no = ob.store_no)
		 where rental_no = #{rentalNo}
	</select>

	<!-- [사용자] 도서 대여 신청 (연지) -->
	<insert id="insertRental">
		insert
			  	into rental
			  (
			  	rental_no
			  , mem_no
			  , bk_no
			  , store_no
			  , request_date
			  , rental_status
			  )
			  values
			  (
			    seq_rtno.nextval
			  , #{memNo}
			  , #{bkNo}
			  , #{storeNo}
			  , sysdate
			  , '예약중'
			  )
	</insert>
	
	<!-- [관리자] 대여 목록 개수 조회 (한진) -->
	<select id="selectAdminRentalListCount" resultType="_int">
		select
		       count(*)
		  from rental
	</select>
	
	<!-- [관리자] '예약중'인 목록 개수 조회 (한진) -->
	<select id="selectAdminReserveListCount" resultType="_int">
		select
		       count(*)
		  from rental
		 where rental_status = '예약중'
	</select>
	
	<!-- [관리자] '대여중'인 목록 개수 조회 (한진) -->
	<select id="selectAdminRentalIngListCount" resultType="_int">
		select
		       count(*)
		  from rental
		 where rental_status = '대여중'
	</select>
	
	<!-- [관리자] '반납완료'인 목록 개수 조회 (한진) -->
	<select id="selectAdminReturnListCount" resultType="_int">
		select
		       count(*)
		  from rental
		 where rental_status = '반납완료'
	</select>
	
	<!-- [관리자] '연체'인 목록 개수 조회 (한진) -->
	<select id="selectAdminOverdueListCount" resultType="_int">
		select
		       count(*)
		  from rental
		 where rental_status = '연체'
	</select>
	
	<!-- [관리자] '예약취소'인 목록 개수 조회 (한진) -->
	<select id="selectAdminRentalCancelListCount" resultType="_int">
		select
		       count(*)
		  from rental
		 where rental_status = '예약취소'
	</select>
	
	<!-- [관리자] 대여 목록 조회 (한진) -->
	<select id="selectAdminRentalList" resultMap="rentalResult">
		select
		       rental_no,
		       mem_id,
		       mem_name,
		       bk_no,
		       bk_title,
		       store_no,
		       store_name,
		       request_date,
		       receive_date,
		       return_date,
		       rental_status
		  from rental
		  join members using (mem_no)
		  join book using (bk_no)
		  join store using (store_no)
		  <choose>
		  	<when test="rStatus == 1">
		  		where rental_status = '예약중'
		  	</when>
		  	<when test="rStatus == 2">
		  		where rental_status = '대여중'
		  	</when>
		  	<when test="rStatus == 3">
		  		where rental_status = '반납완료'
		  	</when>
		  	<when test="rStatus == 4">
		  		where rental_status = '연체'
		  	</when>
		  	<when test="rStatus == 5">
		  		where rental_status = '예약취소'
		  	</when>
		  </choose>
		  order
		     by
			    <choose>
			    	<when test="array == 0">
			    		request_date desc
			    	</when>
			    	<when test="array == 1">
			    		request_date asc
			    	</when>
			    	<when test="array == 2">
			    		receive_date desc
			    	</when>
			    	<when test="array == 3">
			    		receive_date asc
			    	</when>
			    	<when test="array == 4">
			    		return_date desc
			    	</when>
			    	<when test="array == 5">
			    		return_date asc
			    	</when>
			    </choose>
	</select>
	
	<!-- [관리자] 검색 조건에 일치하는 목록 개수 조회 (한진) -->
	<select id="selectAdminListSearchCount" resultType="_int">
		select
		       count(*)
		  from rental
		  join members using (mem_no)
		  join book using (bk_no)
		  join store using (store_no)
		 where rental_no > 0
		  <choose>
		  	<when test="rStatus == 1">
		  		and rental_status = '예약중'
		  	</when>
		  	<when test="rStatus == 2">
		  		and rental_status = '대여중'
		  	</when>
		  	<when test="rStatus == 3">
		  		and rental_status = '반납완료'
		  	</when>
		  	<when test="rStatus == 4">
		  		and rental_status = '연체'
		  	</when>
		  	<when test="rStatus == 5">
		  		and rental_status = '예약취소'
		  	</when>
		  </choose>
		  <choose>
			 <when test="condition == 'searchAll'">
				and (rental_no like '%' || #{keyword} || '%'
				 or mem_name like '%' || #{keyword} || '%'
				 or mem_id like '%' || #{keyword} || '%'
				 or bk_title like '%' || #{keyword} || '%'
				 or store_name like '%' || #{keyword} || '%')
			 </when>
			 <when test="condition == 'rentalNo'">
				and rental_no like '%' || #{keyword} || '%'
			 </when>		
			 <when test="condition == 'memName'">
				and mem_name like '%' || #{keyword} || '%'
			 </when>
			 <when test="condition == 'memId'">
				and mem_id like '%' || #{keyword} || '%'
			 </when>
			 <when test="condition == 'bookName'">
				and bk_title like '%' || #{keyword} || '%'
			 </when>
			 <when test="condition == 'storeName'">
				and store_name like '%' || #{keyword} || '%'
			 </when>
		  </choose>
	</select>

	<!-- [관리자] 검색 조건에 일치하는 목록 조회 (한진) -->
	<select id="selectAdminRentalSearchList" resultMap="rentalResult">
		select
		       rental_no,
		       mem_id,
		       mem_name,
		       bk_no,
		       bk_title,
		       store_no,
		       store_name,
		       request_date,
		       receive_date,
		       return_date,
		       rental_status
		  from rental
		  join members using (mem_no)
		  join book using (bk_no)
		  join store using (store_no)
		 where rental_no > 0
		  <choose>
		  	<when test="rStatus == 1">
		  		and rental_status = '예약중'
		  	</when>
		  	<when test="rStatus == 2">
		  		and rental_status = '대여중'
		  	</when>
		  	<when test="rStatus == 3">
		  		and rental_status = '반납완료'
		  	</when>
		  	<when test="rStatus == 4">
		  		and rental_status = '연체'
		  	</when>
		  	<when test="rStatus == 5">
		  		and rental_status = '예약취소'
		  	</when>
		  </choose>
		  <choose>
			 <when test="condition == 'searchAll'">
				and (rental_no like '%' || #{keyword} || '%'
				 or mem_name like '%' || #{keyword} || '%'
				 or mem_id like '%' || #{keyword} || '%'
				 or bk_title like '%' || #{keyword} || '%'
				 or store_name like '%' || #{keyword} || '%')
			 </when>
			 <when test="condition == 'rentalNo'">
				and rental_no like '%' || #{keyword} || '%'
			 </when>		
			 <when test="condition == 'memName'">
				and mem_name like '%' || #{keyword} || '%'
			 </when>
			 <when test="condition == 'memId'">
				and mem_id like '%' || #{keyword} || '%'
			 </when>
			 <when test="condition == 'bookName'">
				and bk_title like '%' || #{keyword} || '%'
			 </when>
			 <when test="condition == 'storeName'">
				and store_name like '%' || #{keyword} || '%'
			 </when>
		  </choose>
		  order
		     by
			    <choose>
			    	<when test="array == 0">
			    		request_date desc
			    	</when>
			    	<when test="array == 1">
			    		request_date asc
			    	</when>
			    	<when test="array == 2">
			    		receive_date desc
			    	</when>
			    	<when test="array == 3">
			    		receive_date asc
			    	</when>
			    	<when test="array == 4">
			    		return_date desc
			    	</when>
			    	<when test="array == 5">
			    		return_date asc
			    	</when>
			    </choose>
	</select>
	
	<!-- [관리자] 대여 상태 변경 (한진) -->
	<update id="updateRentalStatus">
		update
		       rental
		<choose>
			<when test="statusValue == 'rental'">
			   set rental_status = '대여중'
			</when>
			<when test="statusValue == 'cancel'">
			   set rental_status = '예약취소'
			</when>
			<when test="statusValue == 'return'">
			   set rental_status = '반납완료'
			</when>
			<when test="statusValue == 'overDue'">
			   set rental_status = '연체'
			</when>
		</choose>
		 where rental_no = #{rNo}
	</update>
	
	<!-- [관리자] '대여중' 수령일 변경 (한진) -->
	<update id="updateRentalReceiveDate">
		update
		       rental
		   set receive_date = sysdate
		 where rental_no = #{rNo} 
	</update>
	
	<!-- [관리자] '반납완료' 반납일 변경 (한진) -->
	<update id="updateRentalReturnDate">
		update
		       rental
		   set return_date = sysdate
		 where rental_no = #{rNo}
	</update>
</mapper>